1. What happens if I return Unique pointer?
2. auto_ptr vs shared_ptr?
3. what will happen if shared_ptr is created using raw pointer and later deleted?
4. difference between static_cast and ()?
5. A -> B&C -> D Dimond problem? what will be the order of construction of classes?
6. SOLID principles?
7. map, un ordered map and multimap? time complexity?
8. Why threads? Synchronisation ? deadlock ? data race?
9. what's new learnt in c++?
10. Design patterns? how many you know? explain breifly?
11. Diamond problem?
12. A -> B&C is in library and B&C are not virtually derived. How outside class D will use A methods without abmigious?
13. What is copy elision?
14. What happens in below cases.
	itr = somevector.begin();
	itr--;
	
	itr = somevector.end()
	itr++;

15. When do you use Lambda function?

16. What will be the value of x in each case?
auto incr1(int& a) {return ++a;}
auto incr2(int& a) {return a++;}
decltype(auto) incr4(int& a) {return ++a;}

int y = 10;
int& x = incr1(y);
int& x = incr2(y);
int& x = incr4(y);

16. How to represent binary number ( ex: 1010 1110 to int var)?

17. what is deprecated attribute?
18. What is Generic Lambda ?

19. Little Endian and Big Endian?
20. Static and Dynamic linkage?
21. covariant return types...!

class Base
{
public:
    // This version of GetThis() returns a pointer to a Base class
    virtual Base* GetThis() { return this; }
};
 
class Derived: public Base
{
    // Normally override functions have to return objects of the same type as the base function
    // However, because Derived is derived from Base, it's okay to return Derived* instead of Base*
    virtual Derived* GetThis() { return this; }
};
Note that some older compilers (eg. Visual Studio 6) do not support covariant return types.

22. what is Koening lookup ?
23. Variable argument list example..
24. What is placement new ?

#include <stdio.h>
#include <stdarg.h>

double average(int num,...) {

   va_list valist;
   double sum = 0.0;
   int i;

   /* initialize valist for num number of arguments */
   va_start(valist, num);

   /* access all the arguments assigned to valist */
   for (i = 0; i < num; i++) {
      sum += va_arg(valist, int);
   }
	
   /* clean memory reserved for valist */
   va_end(valist);

   return sum/num;
}

int main() {
   printf("Average of 2, 3, 4, 5 = %f\n", average(4, 2,3,4,5));
   printf("Average of 5, 10, 15 = %f\n", average(3, 5,10,15));
}

24. How to allocate memory to N-D array and how to pass/return to/from function?
25. How new and delete will work?
26. write overrloadin new and delete operators?
27. Deep Copy vs shallow copy?
